using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Trivial.Collection;
using Trivial.Data;
using Trivial.Users;
using Trivial.Text;

namespace Trivial.Tasks;

/// <summary>
/// The context of the command guidance for the chat bot.
/// </summary>
public class ChatCommandGuidanceContext
{
    private readonly JsonObjectNode infos;
    private readonly Dictionary<string, JsonObjectNode> nextData = new();
    private readonly Dictionary<string, JsonObjectNode> nextInfo = new();
    private readonly ChatCommandGuidanceRequest request;

    /// <summary>
    /// Initializes a new instance of the ChatCommandGuidanceContext class.
    /// </summary>
    /// <param name="request">The request.</param>
    public ChatCommandGuidanceContext(ChatCommandGuidanceRequest request)
    {
        NextInfo = new();
        nextInfo["_"] = NextInfo;
        this.request = request ?? new(null, null, null, null);
        UserMessageData = request.Data;
        var history = request.History;
        History = history == null ? new() : new(history);
        Info = request.Info?.TryGetObjectValue("_");
        infos = request.Info;
    }

    /// <summary>
    /// Gets the instance identifier.
    /// </summary>
    public Guid Id { get; } = Guid.NewGuid();

    /// <summary>
    /// Gets the tracking identifier.
    /// </summary>
    public Guid TrackingId => request.TrackingId;

    /// <summary>
    /// Gets the creation date time.
    /// </summary>
    public DateTime CreationTime { get; } = DateTime.Now;

    /// <summary>
    /// Gets the replied date time.
    /// </summary>
    public DateTime? RepliedTime { get; private set; }

    /// <summary>
    /// Gets the chat message from sender.
    /// </summary>
    public string UserMessage => request.Message;

    /// <summary>
    /// Gets the chat message data from sender.
    /// </summary>
    public JsonObjectNode UserMessageData { get; }

    /// <summary>
    /// Gets the original chat message result.
    /// </summary>
    public string OriginalAnswerMessage { get; private set; }

    /// <summary>
    /// Gets the chat message result.
    /// </summary>
    public string AnswerMessage { get; private set; }

    /// <summary>
    /// Gets the user identifier.
    /// </summary>
    public string UserId => request.User?.Id;

    /// <summary>
    /// Gets the user nickname.
    /// </summary>
    public string UserNickname => request.User?.Nickname;

    /// <summary>
    /// Gets the user gender.
    /// </summary>
    public Genders Gender => request.User?.Gender ?? Genders.Unknown;

    /// <summary>
    /// Gets the URI of the user avatar.
    /// </summary>
    public Uri UserAvatar => request.User?.AvatarUri;

    /// <summary>
    /// Gets the history.
    /// </summary>
    public List<SimpleChatMessage> History { get; }

    /// <summary>
    /// Gets the context information.
    /// The command guidance can access this to store useful data during this round.
    /// </summary>
    public JsonObjectNode Info { get; }

    /// <summary>
    /// Gets next context information for context.
    /// </summary>
    public JsonObjectNode NextInfo { get; }

    /// <summary>
    /// Gets the data of the business rich output.
    /// </summary>
    public JsonObjectNode AnswerData { get; } = new();

    /// <summary>
    /// Gets the prompt collection generated by each command guidance.
    /// </summary>
    internal SynchronizedList<string> PromptCollection { get; } = new();

    /// <summary>
    /// Rewrites the answer message.
    /// </summary>
    /// <param name="value">The message.</param>
    public void RewriteAnswerMessage(string value)
        => AnswerMessage = value;

    /// <summary>
    /// Rewrites the answer message.
    /// </summary>
    /// <param name="value">The message.</param>
    /// <param name="additionalNewLine">true if append an empty line before original message.</param>
    public void AppendAnswerMessage(string value, bool additionalNewLine = false)
        => AnswerMessage = string.IsNullOrWhiteSpace(OriginalAnswerMessage) ? value : string.Concat(AnswerMessage, Environment.NewLine, additionalNewLine ? Environment.NewLine : string.Empty, value);

    /// <summary>
    /// Gets the JSON object of response.
    /// </summary>
    /// <returns>The response JSON object.</returns>
    public ChatCommandGuidanceResponse GetResponse()
    {
        var resp = new ChatCommandGuidanceResponse(AnswerMessage, AnswerData, Info, request);
        foreach (var item in nextData)
        {
            resp.Details[item.Key] = item.Value;
        }

        return resp;
    }

    /// <summary>
    /// Sets the answer message.
    /// </summary>
    /// <param name="value">The message.</param>
    internal void SetAnswerMessage(string value)
    {
        RepliedTime = DateTime.Now;
        AnswerMessage = value;
        OriginalAnswerMessage = value;
    }

    /// <summary>
    /// Gets the information data.
    /// </summary>
    /// <param name="key">The command key.</param>
    /// <returns>The information data.</returns>
    internal JsonObjectNode GetInfo(string key)
        => key == null ? Info : infos?.TryGetObjectValue(key);

    /// <summary>
    /// Gets the next information data of a specific command.
    /// </summary>
    /// <param name="command">The command key.</param>
    /// <param name="init">true if ensures; otherwise, false.</param>
    /// <returns>The next information data for context.</returns>
    internal JsonObjectNode GetNextInfo(string command, bool init = false)
    {
        if (command == null) return NextInfo;
        command = command.Trim().ToLowerInvariant();
        if (nextInfo.TryGetValue(command, out var result)) return result;
        if (!init) return null;
        result = new();
        nextInfo[command] = result;
        return result;
    }

    /// <summary>
    /// Gets the answer data of a specific command.
    /// </summary>
    /// <param name="command">The command key.</param>
    /// <param name="init">true if ensures; otherwise, false.</param>
    /// <returns>The data for rich output.</returns>
    internal JsonObjectNode GetAnswerData(string command, bool init = false)
    {
        if (command == null) return AnswerData;
        command = command.Trim().ToLowerInvariant();
        if (nextData.TryGetValue(command, out var result)) return result;
        if (!init) return null;
        result = new();
        nextData[command] = result;
        return result;
    }
}

/// <summary>
/// The request of chat command guidance.
/// </summary>
public class ChatCommandGuidanceRequest
{
    /// <summary>
    /// Initializes a new instance of the ChatCommandGuidanceRequest class.
    /// </summary>
    /// <param name="user">The user instance.</param>
    /// <param name="message">The message text.</param>
    /// <param name="data">The message data.</param>
    /// <param name="history">The chat history.</param>
    /// <param name="clientContextData">The context data from client.</param>
    /// <param name="response">The latest response.</param>
    public ChatCommandGuidanceRequest(UserItemInfo user, string message, JsonObjectNode data, IEnumerable<SimpleChatMessage> history, JsonObjectNode clientContextData = null, ChatCommandGuidanceResponse response = null)
    {
        User = user;
        Message = message;
        Data = data ?? new();
        History = history ?? new List<SimpleChatMessage>();
        ClientContextData = clientContextData ?? new();
        TrackingId = response?.TrackingId ?? Guid.NewGuid();
        Info = response?.Info ?? new();
    }

    /// <summary>
    /// Gets the user instance.
    /// </summary>
    internal UserItemInfo User { get; }

    /// <summary>
    /// Gets the message identifier.
    /// </summary>
    public Guid Id { get; } = Guid.NewGuid();

    /// <summary>
    /// Gets the nickname of the sender.
    /// </summary>
    public string UserNickname => User.Nickname;

    /// <summary>
    /// Gets the sender identifier.
    /// </summary>
    public string UserId => User.Id;

    /// <summary>
    /// Gets the gender of the sender.
    /// </summary>
    public Genders Gender => User.Gender;

    /// <summary>
    /// Gets the URI of the sender avatar.
    /// </summary>
    public Uri UserAvatar => User.AvatarUri;

    /// <summary>
    /// Gets the tracking identifier.
    /// </summary>
    public Guid TrackingId { get; private set; }

    /// <summary>
    /// Gets the message.
    /// </summary>
    public string Message { get; }

    /// <summary>
    /// Gets the data.
    /// </summary>
    public JsonObjectNode Data { get; }

    /// <summary>
    /// Gets the information.
    /// </summary>
    public JsonObjectNode Info { get; private set; }

    /// <summary>
    /// Gets the chat history.
    /// </summary>
    public IEnumerable<SimpleChatMessage> History { get; }

    /// <summary>
    /// Gets the context data from client.
    /// </summary>
    public JsonObjectNode ClientContextData { get; }

    /// <summary>
    /// Converts the JSON raw back.
    /// </summary>
    /// <param name="value">The source value.</param>
    /// <returns>The request instance.</returns>
    public static implicit operator ChatCommandGuidanceRequest(JsonObjectNode value)
    {
        if (value is null) return null;
        return new(value.TryGetObjectValue("sender"), value.TryGetStringValue("text") ?? value.TryGetStringValue("message"), value.TryGetObjectValue("data"), ChatCommandGuidanceHelper.DeserializeChatMessages(value.TryGetArrayValue("history")), value.TryGetObjectValue("ref"))
        {
            TrackingId = value.TryGetGuidValue("tracking") ?? Guid.NewGuid(),
            Info = value.TryGetObjectValue("info"),
        };
    }

    /// <summary>
    /// Converts to JSON object.
    /// </summary>
    /// <param name="value">The JSON value.</param>
    /// <returns>A JSON object.</returns>
    public static explicit operator JsonObjectNode(ChatCommandGuidanceRequest value)
    {
        if (value is null) return null;
        return new()
        {
            { "sender", (JsonObjectNode)value.User },
            { "trackig", value.TrackingId },
            { "text", value.Message },
            { "data", value.Data },
            { "info", value.Info},
            { "history", ChatCommandGuidanceHelper.Serizalize(value.History) },
            { "ref", value.ClientContextData }
        };
    }
}

/// <summary>
/// The request of chat command guidance.
/// </summary>
public class ChatCommandGuidanceResponse
{
    /// <summary>
    /// Initializes a new instance of the ChatCommandGuidanceResponse class.
    /// </summary>
    /// <param name="message">The answer message text.</param>
    /// <param name="data">The answer data.</param>
    /// <param name="info">The information data for context.</param>
    /// <param name="request">The request message.</param>
    internal ChatCommandGuidanceResponse(string message, JsonObjectNode data, JsonObjectNode info = null, ChatCommandGuidanceRequest request = null)
    {
        Id = Guid.NewGuid();
        RequestId = request?.Id ?? Guid.Empty;
        TrackingId = request?.TrackingId ?? Guid.NewGuid();
        Message = message;
        Data = data;
        Info = info;
        ClientContextData = request?.ClientContextData;
    }

    /// <summary>
    /// Gets the message identifier.
    /// </summary>
    public Guid Id { get; private set; }

    /// <summary>
    /// Gets the identifier of request message.
    /// </summary>
    public Guid RequestId { get; private set; }

    /// <summary>
    /// Gets the tracking identifier.
    /// </summary>
    public Guid TrackingId { get; private set; }

    /// <summary>
    /// Gets the message.
    /// </summary>
    public string Message { get; }

    /// <summary>
    /// Gets the response data.
    /// </summary>
    public JsonObjectNode Data { get; }

    /// <summary>
    /// Gets the details.
    /// </summary>
    public Dictionary<string, JsonObjectNode> Details { get; } = new();

    /// <summary>
    /// Gets the information.
    /// </summary>
    public JsonObjectNode Info { get; }

    /// <summary>
    /// Gets the context data from client.
    /// </summary>
    public JsonObjectNode ClientContextData { get; private set; }

    /// <summary>
    /// Converts the JSON raw back.
    /// </summary>
    /// <param name="value">The source value.</param>
    /// <returns>The response instance.</returns>
    public static implicit operator ChatCommandGuidanceResponse(JsonObjectNode value)
    {
        if (value is null) return null;
        var result = new ChatCommandGuidanceResponse(
            value.TryGetStringValue("text") ?? value.TryGetStringValue("message"),
            value.TryGetObjectValue("data"),
            value.TryGetObjectValue("info"))
        {
            Id = value.TryGetGuidValue("id") ?? Guid.NewGuid(),
            RequestId = value.TryGetGuidValue("request") ?? Guid.Empty,
            ClientContextData = value.TryGetObjectValue("ref")
        };
        var detailsArr = value.TryGetObjectValue("details") ?? new();
        foreach (var item in detailsArr)
        {
            if (item.Value is not JsonObjectNode json) continue;
            result.Details[item.Key] = json;
        }

        return result;
    }

    /// <summary>
    /// Converts to JSON object.
    /// </summary>
    /// <param name="value">The JSON value.</param>
    /// <returns>A JSON object.</returns>
    public static explicit operator JsonObjectNode(ChatCommandGuidanceResponse value)
    {
        if (value is null) return null;
        return new()
        {
            { "id", value.Id },
            { "trackig", value.TrackingId },
            { "text", value.Message },
            { "data", value.Data },
            { "details", ChatCommandGuidanceHelper.ToJson(value.Details) },
            { "info", value.Info},
            { "ref", value.ClientContextData }
        };
    }
}
